{"./":{"url":"./","title":"Introduction","keywords":"","body":"Introduction https://qgao233.github.io/qgaoDesignPatterns Copyright © qgao 2021-* all right reserved，powered by Gitbook该文件修订时间： 2022-07-08 21:13:28 "},"chapter1/":{"url":"chapter1/","title":"1. 中介者模式","keywords":"","body":"TreeviewCopyright © qgao 2021-* all right reserved, powered by aleen42 Client.java Colleague.java ConcreteColleague1.java ConcreteColleague2.java Mediator.java ConcreteMediator.java 中介者模式 Client.java package com.bermuda.surface; import com.bermuda.background.ConcreteColleague1; import com.bermuda.background.ConcreteColleague2; import com.bermuda.background.ConcreteMediator; public class Client { public static void main(String[] args) { ConcreteMediator mediator = new ConcreteMediator(); ConcreteColleague1 concreteColleague1 = new ConcreteColleague1(mediator); ConcreteColleague2 concreteColleague2 = new ConcreteColleague2(mediator); mediator.setConcreteColleague1(concreteColleague1); mediator.setConcreteColleague2(concreteColleague2); concreteColleague1.send(\"how do you do\"); concreteColleague2.send(\"fine\"); } } Colleague.java package com.bermuda.background; public abstract class Colleague { protected Mediator mediator; public Colleague(Mediator mediator) { this.mediator = mediator; } public abstract void send(String message); public abstract void notify(String message); } ConcreteColleague1.java package com.bermuda.background; public class ConcreteColleague1 extends Colleague { public ConcreteColleague1(Mediator mediator) { super(mediator); } public void send(String message) { mediator.send(message,this); } public void notify(String message) { System.out.println(\"1 get \"+message); } } ConcreteColleague2.java package com.bermuda.background; public class ConcreteColleague2 extends Colleague { public ConcreteColleague2(Mediator mediator) { super(mediator); } public void send(String message) { mediator.send(message,this); } public void notify(String message) { System.out.println(\"2 get \"+message); } } Mediator.java package com.bermuda.background; public abstract class Mediator { public abstract void send(String message,Colleague colleague); } ConcreteMediator.java package com.bermuda.background; public class ConcreteMediator extends Mediator{ private ConcreteColleague1 concreteColleague1; private ConcreteColleague2 concreteColleague2; public void setConcreteColleague1(ConcreteColleague1 concreteColleague1) { this.concreteColleague1 = concreteColleague1; } public void setConcreteColleague2(ConcreteColleague2 concreteColleague2) { this.concreteColleague2 = concreteColleague2; } public void send(String message, Colleague colleague) { if(colleague == concreteColleague1){ concreteColleague2.notify(message); }else { concreteColleague1.notify(message); } } } Copyright © qgao 2021-* all right reserved，powered by Gitbook该文件修订时间： 2022-07-08 21:13:28 "},"chapter2/":{"url":"chapter2/","title":"2. 享元模式","keywords":"","body":"TreeviewCopyright © qgao 2021-* all right reserved, powered by aleen42 Client.java Website.java ConcreteWebSite.java WebsiteFactory.java User.java 享元模式 Client.java package com.bermuda.surface; import com.bermuda.background.User; import com.bermuda.background.Website; import com.bermuda.background.WebsiteFactory; public class Client { public static void main(String[] args) { WebsiteFactory websiteFactory = new WebsiteFactory(); Website fx = websiteFactory.getWebsiteCatagory(\"product show\"); fx.use(new User(\"gao\")); } } Website.java package com.bermuda.background; public abstract class Website { public abstract void use(User user); } ConcreteWebSite.java package com.bermuda.background; public class ConcreteWebSite extends Website { private String name; public ConcreteWebSite(String name) { this.name = name; } public void use(User user) { System.out.println(\"网站分类：\"+name+\" 用户：\"+user.getName()); } } WebsiteFactory.java package com.bermuda.background; import java.util.Hashtable; public class WebsiteFactory { private Hashtable flyweights = new Hashtable(); public Website getWebsiteCatagory(String key){ if(!flyweights.containsKey(key)){ flyweights.put(key,new ConcreteWebSite(key)); } return flyweights.get(key); } public int getWebSiteCount(){ return flyweights.size(); } } User.java package com.bermuda.background; public class User { private String name; public User(String name) { this.name = name; } public String getName() { return name; } public void setName(String name) { this.name = name; } } Copyright © qgao 2021-* all right reserved，powered by Gitbook该文件修订时间： 2022-07-08 21:13:28 "},"chapter3/":{"url":"chapter3/","title":"3. 代理模式","keywords":"","body":"TreeviewCopyright © qgao 2021-* all right reserved, powered by aleen42 Client.java GivenGift.java RealMan.java Proxy.java 代理模式 Client.java package com.bermuda.surface; import com.bermuda.entityImpl.Proxy; public class Client { public static void main(String[] args) { Proxy proxy = new Proxy(\"lianlian\"); proxy.giveFlower(); proxy.giveMoney(); } } GivenGift.java package com.bermuda.entity; public interface GivenGift { void giveFlower(); void giveMoney(); } RealMan.java package com.bermuda.entityImpl; import com.bermuda.entity.GivenGift; public class RealMan implements GivenGift { private String name; public RealMan(String name) { this.name = name; } public void giveFlower() { System.out.println(\"送\"+name+\"花\"); } public void giveMoney() { System.out.println(\"送\"+name+\"钱\"); } } Proxy.java package com.bermuda.entityImpl; import com.bermuda.entity.GivenGift; public class Proxy implements GivenGift { RealMan realMan = null; public Proxy(String name) { this.realMan = new RealMan(name); } public void giveFlower() { realMan.giveFlower(); } public void giveMoney() { realMan.giveMoney(); } } Copyright © qgao 2021-* all right reserved，powered by Gitbook该文件修订时间： 2022-07-08 21:13:28 "},"chapter4/":{"url":"chapter4/","title":"4. 单例模式-多线程","keywords":"","body":"TreeviewCopyright © qgao 2021-* all right reserved, powered by aleen42 饿汉单例 懒汉单例 单例模式-多线程 饿汉单例 package com.bermuda.relativeClass; /** * 饿汉单例 */ public class HungrySingleton { private static final HungrySingleton instance = new HungrySingleton(); private HungrySingleton(){ } public static HungrySingleton getInstance() { return instance; } } 懒汉单例 package com.bermuda.relativeClass; /** * 懒汉单例 */ public class LazySingleton { private static volatile LazySingleton instance; private static Object object = new Object(); private LazySingleton(){ } public static LazySingleton getInstance() { if(instance == null){ synchronized (object){ if(instance == null){ instance = new LazySingleton(); } } } return instance; } } Copyright © qgao 2021-* all right reserved，powered by Gitbook该文件修订时间： 2022-07-08 21:13:28 "},"chapter5/":{"url":"chapter5/","title":"5. 原型模式(部分实现)","keywords":"","body":"TreeviewCopyright © qgao 2021-* all right reserved, powered by aleen42 Client.java Resume.java WorkExperience.java 原型模式(部分实现) Client.java package com.bermuda.surface; import com.bermuda.shallowCopy.Resume; /** * prototype:原型模式 */ public class Client { public static void main(String[] args) { //shallowCopy 这里出了点问题，不能复现浅复制，暂待解决 Resume resume = new Resume(); resume.setWorkExperience(\"2005\"); System.out.println(resume.getId()+\"#\"+resume.getWorkExperience().getWorkDate()); Resume resume1 = (Resume)resume.clone(); resume1.setWorkExperience(\"2008\"); System.out.println(resume.getId()+\"#\"+resume.getWorkExperience().getWorkDate()); // } } Resume.java package com.bermuda.shallowCopy; public class Resume implements Cloneable{ private int id; private WorkExperience workExperience; public Resume() { this.id = 0; this.workExperience = new WorkExperience(); } public int getId() { return id; } public void setId(int id) { this.id = id; } public WorkExperience getWorkExperience() { return workExperience; } public void setWorkExperience(String workDate) { this.workExperience.setWorkDate(workDate); } @Override public Object clone() { Object object = null; try { object = super.clone(); } catch (CloneNotSupportedException e) { e.printStackTrace(); } return object; } } WorkExperience.java package com.bermuda.shallowCopy; public class WorkExperience { private String workDate; public String getWorkDate() { return workDate; } public void setWorkDate(String workDate) { this.workDate = workDate; } } Copyright © qgao 2021-* all right reserved，powered by Gitbook该文件修订时间： 2022-07-08 21:13:28 "},"chapter6/":{"url":"chapter6/","title":"6. 命令模式","keywords":"","body":"TreeviewCopyright © qgao 2021-* all right reserved, powered by aleen42 Client.java Command.java ConcreteCommand.java Invoker.java Receiver.java 命令模式 Client.java package com.bermuda.surface; import com.bermuda.related.Command; import com.bermuda.related.ConcreteCommand; import com.bermuda.related.Invoker; import com.bermuda.related.Receiver; public class Client { public static void main(String[] args) { Receiver receiver = new Receiver(); Command command = new ConcreteCommand(receiver); Invoker invoker = new Invoker(); invoker.setCommand(command); invoker.executeCommand(); } } Command.java package com.bermuda.related; public abstract class Command { protected Receiver receiver; public Command(Receiver receiver) { this.receiver = receiver; } public abstract void execute(); } ConcreteCommand.java package com.bermuda.related; public class ConcreteCommand extends Command{ public ConcreteCommand(Receiver receiver) { super(receiver); } public void execute() { receiver.action(); } } Invoker.java package com.bermuda.related; public class Invoker { private Command command; public void setCommand(Command command) { this.command = command; } public void executeCommand(){ command.execute(); } } Receiver.java package com.bermuda.related; public class Receiver { public void action(){ System.out.println(\"执行请求\"); } } Copyright © qgao 2021-* all right reserved，powered by Gitbook该文件修订时间： 2022-07-08 21:13:28 "},"chapter7/":{"url":"chapter7/","title":"7. 备忘录模式","keywords":"","body":"TreeviewCopyright © qgao 2021-* all right reserved, powered by aleen42 Client.java Caretaker.java GameRole.java Memento.java 备忘录模式 Client.java package com.bermuda.surface; import com.bermuda.relativeClass.Caretaker; import com.bermuda.relativeClass.GameRole; import com.bermuda.relativeClass.Memento; /** * 主要就是对内部实现进行封装 */ public class Client { public static void main(String[] args) { GameRole zhang = new GameRole(); Caretaker caretaker = new Caretaker(); caretaker.setMemento(zhang.saveState()); zhang.fight(); zhang.recoverState(caretaker.getMemento()); } } Caretaker.java package com.bermuda.relativeClass; public class Caretaker { private Memento memento; public Memento getMemento() { return memento; } public void setMemento(Memento memento) { this.memento = memento; } } GameRole.java package com.bermuda.relativeClass; public class GameRole { private int attack; private int defend; public GameRole() { this.attack = 100; this.defend = 100; } public void fight(){ this.attack -= 50; this.defend -= 50; System.out.println(\"战斗力降低了\"); } public Memento saveState(){ System.out.println(\"保存进度\"); return new Memento(attack,defend); } public void recoverState(Memento memento){ this.attack = memento.getAttack(); this.defend = memento.getDefend(); System.out.println(\"恢复进度\"); } } Memento.java package com.bermuda.relativeClass; public class Memento { private int attack; private int defend; public Memento(int attack, int defend) { this.attack = attack; this.defend = defend; } public int getAttack() { return attack; } public void setAttack(int attack) { this.attack = attack; } public int getDefend() { return defend; } public void setDefend(int defend) { this.defend = defend; } } Copyright © qgao 2021-* all right reserved，powered by Gitbook该文件修订时间： 2022-07-08 21:13:28 "},"chapter8/":{"url":"chapter8/","title":"8. 外观模式-门面模式","keywords":"","body":"TreeviewCopyright © qgao 2021-* all right reserved, powered by aleen42 Client.java Fund.java NationalDebt.java Realty.java Stock.java 外观模式-门面模式 Client.java package com.bermuda.surface; import com.bermuda.Manage.Fund; public class Client { public static void main(String[] args) { Fund fund = new Fund(); fund.buy(); fund.sell(); } } Fund.java package com.bermuda.Manage; import com.bermuda.duty.NationalDebt; import com.bermuda.duty.Realty; import com.bermuda.duty.Stock; /** * 门面 */ public class Fund { private Stock stock; private Realty realty; private NationalDebt nationalDebt; public Fund() { this.stock = new Stock(); this.realty = new Realty(); this.nationalDebt = new NationalDebt(); } public void buy(){ stock.buy(); realty.buy(); nationalDebt.buy(); } public void sell(){ stock.sell(); realty.sell(); nationalDebt.sell(); } } NationalDebt.java package com.bermuda.duty; /** * 国债 */ public class NationalDebt { public void buy(){ System.out.println(\"buy NationalDebt\"); } public void sell(){ System.out.println(\"sell NationalDebt\"); } } Realty.java package com.bermuda.duty; /** * 房地产 */ public class Realty { public void buy(){ System.out.println(\"buy Realty\"); } public void sell(){ System.out.println(\"sell Realty\"); } } Stock.java package com.bermuda.duty; /** * 股份 */ public class Stock { public void buy(){ System.out.println(\"buy stock\"); } public void sell(){ System.out.println(\"sell stock\"); } } Copyright © qgao 2021-* all right reserved，powered by Gitbook该文件修订时间： 2022-07-08 21:13:28 "},"chapter9/":{"url":"chapter9/","title":"9. 委托模式","keywords":"","body":"TreeviewCopyright © qgao 2021-* all right reserved, powered by aleen42 Client.java Informer.java Boss.java EventHandler.java Event.java Observer.java StockObserver.java 委托模式 Client.java package com.bermuda.surface; import com.bermuda.informer.Boss; import com.bermuda.informer.Informer; import com.bermuda.observer.Observer; import com.bermuda.observer.StockObserver; /** * 先有了观察者模式，再有的委托模式（弥补了观察者模式的不足） */ public class Client { public static void main(String[] args) { Informer boss = new Boss(); StockObserver stockObserver1 = new StockObserver(boss,\"stockObserver1\"); StockObserver stockObserver2 = new StockObserver(boss,\"stockObserver2\"); boss.attach(\"stockObserver1\",stockObserver1,\"closeStock\"); boss.attach(\"stockObserver2\",stockObserver2,\"closeStock\"); boss.setInformerState(\"boss come in\"); boss.notice(); } } Informer.java package com.bermuda.informer; import com.bermuda.handler.EventHandler; import com.bermuda.observer.Observer; public abstract class Informer { private String informerState; protected EventHandler eventHandler = new EventHandler(); public String getInformerState() { return informerState; } public void setInformerState(String informerState) { this.informerState = informerState; } public abstract void attach(String description,Object object, String methodName, Object...params); public abstract void detach(String description); public abstract void notice(); } Boss.java package com.bermuda.informer; import com.bermuda.observer.Observer; import java.util.ArrayList; import java.util.List; public class Boss extends Informer { public void attach(String description,Object object, String methodName, Object...params) { eventHandler.addEvent(description,object,methodName,params); } public void detach(String description) { eventHandler.removeEvent(description); } public void notice() { try { eventHandler.notifyAllEvents(); } catch (Exception e) { e.printStackTrace(); } } } EventHandler.java package com.bermuda.handler; import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map; public class EventHandler { private Map eventMap = new HashMap(); public void addEvent(String description,Object object, String methodName, Object...params){ eventMap.put(description,new Event(object,methodName,params)); } public void removeEvent(String description){ if(eventMap.containsKey(description)){ eventMap.remove(description); }else { System.out.println(\"no this event\"); } } public void notifyAllEvents() throws Exception{ for(Event event:eventMap.values()){ event.invoke(); } } } Event.java package com.bermuda.handler; import java.lang.reflect.Method; public class Event { //要执行方法的对象 private Object object; //要执行的方法名称 private String methodName; //要执行方法的参数 private Object[] params; //要执行方法的参数类型 private Class[] paramTypes; public Event() { } public Event(Object object, String methodName, Object...params) { this.object = object; this.methodName = methodName; this.params = params; contractParamTypes(params); } //根据参数数组生成参数类型数组 private void contractParamTypes(Object[] params){ this.paramTypes=new Class[params.length]; for(int i=0;iObserver.java package com.bermuda.observer; import com.bermuda.informer.Informer; public abstract class Observer { protected Informer informer; protected String observerName; public Observer(Informer informer, String observerName) { this.informer = informer; this.observerName = observerName; } } StockObserver.java package com.bermuda.observer; import com.bermuda.informer.Informer; public class StockObserver { private Informer informer; private String observerName; public StockObserver(Informer informer, String observerName) { this.informer = informer; this.observerName = observerName; } public void closeStock() { System.out.println(informer.getInformerState()+\":\"+observerName+\" close the stock situation\"); } } Copyright © qgao 2021-* all right reserved，powered by Gitbook该文件修订时间： 2022-07-08 21:13:28 "},"chapter10/":{"url":"chapter10/","title":"10. 工厂方法模式","keywords":"","body":"TreeviewCopyright © qgao 2021-* all right reserved, powered by aleen42 Client.java OperationHelper.java OperationAdd.java OperationSub.java OperationMul.java OperationDiv.java OperationFactory.java AddFactory.java SubFactory.java MulFactory.java DivFactory.java 工厂方法模式 Client.java package com.bermuda.surface; import com.bermuda.helper.OperationHelper; import com.bermuda.util.AddFactory; import com.bermuda.util.OperationFactory; public class Client { public static void main(String[] args) { OperationFactory operationFactory = new AddFactory(); OperationHelper operationHelper = operationFactory.getOperation(); operationHelper.getResult(1,2); } } OperationHelper.java package com.bermuda.helper; public abstract class OperationHelper { public abstract void getResult(int operationA,int operationB); } OperationAdd.java package com.bermuda.helper; public class OperationAdd extends OperationHelper { @Override public void getResult(int operationA,int operationB) { System.out.println(operationA+operationB); } } OperationSub.java package com.bermuda.helper; public class OperationSub extends OperationHelper { @Override public void getResult(int operationA, int operationB) { System.out.println(operationA-operationB); } } OperationMul.java package com.bermuda.helper; public class OperationMul extends OperationHelper { @Override public void getResult(int operationA, int operationB) { System.out.println(operationA*operationB); } } OperationDiv.java package com.bermuda.helper; public class OperationDiv extends OperationHelper { @Override public void getResult(int operationA, int operationB) { if(operationB != 0){ System.out.println(operationA/operationB); }else { System.out.println(\"除数不能为0\"); } } } OperationFactory.java package com.bermuda.util; import com.bermuda.helper.*; public abstract class OperationFactory { public abstract OperationHelper getOperation(); } AddFactory.java package com.bermuda.util; import com.bermuda.helper.OperationAdd; import com.bermuda.helper.OperationHelper; public class AddFactory extends OperationFactory { public OperationHelper getOperation() { return new OperationAdd(); } } SubFactory.java package com.bermuda.util; import com.bermuda.helper.OperationHelper; import com.bermuda.helper.OperationSub; public class SubFactory extends OperationFactory { public OperationHelper getOperation() { return new OperationSub(); } } MulFactory.java package com.bermuda.util; import com.bermuda.helper.OperationHelper; import com.bermuda.helper.OperationMul; public class MulFactory extends OperationFactory{ public OperationHelper getOperation() { return new OperationMul(); } } DivFactory.java package com.bermuda.util; import com.bermuda.helper.OperationDiv; import com.bermuda.helper.OperationHelper; public class DivFactory extends OperationFactory { public OperationHelper getOperation() { return new OperationDiv(); } } Copyright © qgao 2021-* all right reserved，powered by Gitbook该文件修订时间： 2022-07-08 21:13:28 "},"chapter11/":{"url":"chapter11/","title":"11. 建造者模式","keywords":"","body":"TreeviewCopyright © qgao 2021-* all right reserved, powered by aleen42 Client.java PersonDirector.java PersonBuilder.java PersonFatBuilder.java 建造者模式 Client.java package com.bermuda.surface; import com.bermuda.builder.PersonFatBuilder; import com.bermuda.director.PersonDirector; public class Client { public static void main(String[] args) { new PersonDirector().construct(new PersonFatBuilder()); } } PersonDirector.java package com.bermuda.director; import com.bermuda.builder.PersonBuilder; public class PersonDirector { public void construct(PersonBuilder personBuilder){ personBuilder.buildHead(); personBuilder.buildBody(); personBuilder.buildLeftHand(); personBuilder.buildRightHand(); personBuilder.buildLeftFoot(); personBuilder.buildRightFoot(); } } PersonBuilder.java package com.bermuda.builder; public abstract class PersonBuilder { public abstract void buildHead(); public abstract void buildBody(); public abstract void buildLeftHand(); public abstract void buildRightHand(); public abstract void buildLeftFoot(); public abstract void buildRightFoot(); } PersonFatBuilder.java package com.bermuda.builder; public class PersonFatBuilder extends PersonBuilder { public void buildHead() { System.out.println(\"fat Head\"); } public void buildBody() { System.out.println(\"fat Body\"); } public void buildLeftHand() { System.out.println(\"fat LeftHand\"); } public void buildRightHand() { System.out.println(\"fat RightHand\"); } public void buildLeftFoot() { System.out.println(\"fat LeftFoot\"); } public void buildRightFoot() { System.out.println(\"fat RightFoot\"); } } Copyright © qgao 2021-* all right reserved，powered by Gitbook该文件修订时间： 2022-07-08 21:13:28 "},"chapter12/":{"url":"chapter12/","title":"12. 抽象工厂模式","keywords":"","body":"TreeviewCopyright © qgao 2021-* all right reserved, powered by aleen42 Client.java bean dao DepartmentDao MysqlDepartmentDaoImpl SqlServerDepartmentDaoImpl UserDao MysqlUserDaoImpl SqlServerUserDaoImpl dbFactory DataAccess 抽象工厂模式 Client.java package com.bermuda.surface; /** * 抽象工厂模式只是在工厂方法模式的基础上在factory接口中添加创建新对象的方法 * 在本例中就是添加新的表，再在factory接口中添加对应的表对象的方法 * 这里用简单工厂改造抽象工厂，再利用反射，使得程序由编译时转为运行时， * 即具体的对象生成可以利用properties文件通过反射获得 */ public class Client { public static void main(String[] args) { } } bean package com.bermuda.bean; public class User { } package com.bermuda.bean; public class Department { } dao DepartmentDao package com.bermuda.dao; import com.bermuda.bean.Department; public interface DepartmentDao { public void insert(Department department); public void get(int id); } MysqlDepartmentDaoImpl package com.bermuda.daoImpl; import com.bermuda.bean.Department; import com.bermuda.dao.DepartmentDao; public class MysqlDepartmentDaoImpl implements DepartmentDao { public void insert(Department department) { System.out.println(\"mysql add department\"); } public void get(int id) { System.out.println(\"mysql get department\"); } } SqlServerDepartmentDaoImpl package com.bermuda.daoImpl; import com.bermuda.bean.Department; import com.bermuda.dao.DepartmentDao; public class SqlServerDepartmentDaoImpl implements DepartmentDao { public void insert(Department department) { System.out.println(\"sqlserver add department\"); } public void get(int id) { System.out.println(\"sqlserver get department\"); } } UserDao package com.bermuda.dao; import com.bermuda.bean.User; public interface UserDao { public void insert(User user); public void get(int id); } MysqlUserDaoImpl package com.bermuda.daoImpl; import com.bermuda.bean.User; import com.bermuda.dao.UserDao; public class MysqlUserDaoImpl implements UserDao{ public void insert(User user) { System.out.println(\"mysql add user\"); } public void get(int id) { System.out.println(\"mysql get user\"); } } SqlServerUserDaoImpl package com.bermuda.daoImpl; import com.bermuda.bean.User; import com.bermuda.dao.UserDao; public class SqlServerUserDaoImpl implements UserDao { public void insert(User user) { System.out.println(\"sqlserver add user\"); } public void get(int id) { System.out.println(\"sqlserver get user\"); } } dbFactory DataAccess package com.bermuda.dbFactory; import com.bermuda.dao.DepartmentDao; import com.bermuda.dao.UserDao; import com.bermuda.daoImpl.MysqlDepartmentDaoImpl; import com.bermuda.daoImpl.MysqlUserDaoImpl; public class DataAccess { private static String database = \"Mysql\"; // private static String database = \"SqlServer\"; public static UserDao createUserDao(){ //这里根据反射和database字符串获得相应对象实例 return new MysqlUserDaoImpl(); } public static DepartmentDao createDepartmentDao(){ //这里根据反射和database字符串获得相应对象实例 return new MysqlDepartmentDaoImpl(); } } Copyright © qgao 2021-* all right reserved，powered by Gitbook该文件修订时间： 2022-07-08 21:13:28 "},"chapter13/":{"url":"chapter13/","title":"13. 桥接模式","keywords":"","body":"TreeviewCopyright © qgao 2021-* all right reserved, powered by aleen42 Client PhoneBrand OnePlusPhoneBrand XiaomiPhoneBrand PhoneSoft GameSoft Mp3Soft 桥接模式 Client package com.bermuda.surface; import com.bermuda.brand.OnePlusPhoneBrand; import com.bermuda.brand.PhoneBrand; import com.bermuda.soft.GameSoft; public class Client { public static void main(String[] args) { PhoneBrand phoneBrand = new OnePlusPhoneBrand(\"一加\",new GameSoft()); phoneBrand.run(); } } PhoneBrand package com.bermuda.brand; import com.bermuda.soft.PhoneSoft; public abstract class PhoneBrand { protected String name; protected PhoneSoft phoneSoft; public PhoneBrand(String name, PhoneSoft phoneSoft) { this.name = name; this.phoneSoft = phoneSoft; } public abstract void run(); } OnePlusPhoneBrand package com.bermuda.brand; import com.bermuda.soft.PhoneSoft; public class OnePlusPhoneBrand extends PhoneBrand { public OnePlusPhoneBrand(String name, PhoneSoft phoneSoft) { super(name, phoneSoft); } public void run() { System.out.println(name+\":\"+phoneSoft.run()); } } XiaomiPhoneBrand package com.bermuda.brand; import com.bermuda.soft.PhoneSoft; public class XiaomiPhoneBrand extends PhoneBrand { public XiaomiPhoneBrand(String name, PhoneSoft phoneSoft) { super(name, phoneSoft); } public void run() { System.out.println(name+\":\"+phoneSoft.run()); } } PhoneSoft package com.bermuda.soft; public abstract class PhoneSoft { public abstract String run(); } GameSoft package com.bermuda.soft; public class GameSoft extends PhoneSoft { public String run() { return \"run game\"; } } Mp3Soft package com.bermuda.soft; public class Mp3Soft extends PhoneSoft { public String run() { return \"run mp3\"; } } Copyright © qgao 2021-* all right reserved，powered by Gitbook该文件修订时间： 2022-07-08 21:13:28 "},"chapter14/":{"url":"chapter14/","title":"14. 模板方法模式","keywords":"","body":"TreeviewCopyright © qgao 2021-* all right reserved, powered by aleen42 Client Question Answer 模板方法模式 Client package com.bermuda.surface; import com.bermuda.model.Answer; import com.bermuda.model.Question; public class Client { public static void main(String[] args) { Question zhang = new Answer(); zhang.question1(); } } Question package com.bermuda.model; public abstract class Question { public void question1(){ System.out.println(\"请问1+1=多少？A、1 B、2 C、3\"); System.out.println(answer1()); } public abstract String answer1(); } Answer package com.bermuda.model; public class Answer extends Question { @Override public String answer1() { return \"B\"; } } Copyright © qgao 2021-* all right reserved，powered by Gitbook该文件修订时间： 2022-07-08 21:13:28 "},"chapter15/":{"url":"chapter15/","title":"15. 状态模式","keywords":"","body":"TreeviewCopyright © qgao 2021-* all right reserved, powered by aleen42 Client Work State MorningState NoonState AfternoonState 状态模式 Client package com.bermuda.surface; import com.bermuda.relativeClass.Work; public class Client { public static void main(String[] args) { Work work = new Work(); work.setHour(9); work.writeProgram(); work.setHour(18); work.writeProgram(); } } Work package com.bermuda.relativeClass; public class Work { private State state; private double hour; private boolean finish; public Work() { this.state = new MorningState(); } public void writeProgram(){ state.writeProgram(this); } public State getState() { return state; } public void setState(State state) { this.state = state; } public double getHour() { return hour; } public void setHour(double hour) { this.hour = hour; } public boolean isFinish() { return finish; } public void setFinish(boolean finish) { this.finish = finish; } } State package com.bermuda.relativeClass; public abstract class State { public abstract void writeProgram(Work work); } MorningState package com.bermuda.relativeClass; public class MorningState extends State { public void writeProgram(Work work) { if(work.getHour() NoonState package com.bermuda.relativeClass; public class NoonState extends State { public void writeProgram(Work work) { if(work.getHour() AfternoonState package com.bermuda.relativeClass; public class AfternoonState extends State { public void writeProgram(Work work) { if(work.getHour() Copyright © qgao 2021-* all right reserved，powered by Gitbook该文件修订时间： 2022-07-08 21:13:28 "},"chapter16/":{"url":"chapter16/","title":"16. 策略模式","keywords":"","body":"TreeviewCopyright © qgao 2021-* all right reserved, powered by aleen42 Client OperationContext OperationHelper OperationAdd OperationSub OperationMul OperationDiv 策略模式 Client package com.bermuda.surface; import com.bermuda.context.OperationContext; public class Client { public static void main(String[] args) { OperationContext operationContext = new OperationContext('+'); operationContext.getResult(2,2); } } OperationContext package com.bermuda.context; import com.bermuda.helper.*; public class OperationContext { private OperationHelper operationHelper = null; /* 消除switch看抽象工厂模式 */ public OperationContext(char operation) { switch (operation){ case '+': operationHelper = new OperationAdd(); break; case '-': operationHelper = new OperationSub(); break; case '*': operationHelper = new OperationMul(); break; case '/': operationHelper = new OperationDiv(); break; default: operationHelper = null; } } public void getResult(int operationA,int operationB){ operationHelper.getResult(operationA,operationB); } } OperationHelper package com.bermuda.helper; public abstract class OperationHelper { public abstract void getResult(int operationA,int operationB); } OperationAdd package com.bermuda.helper; public class OperationAdd extends OperationHelper { @Override public void getResult(int operationA,int operationB) { System.out.println(operationA+operationB); } } OperationSub package com.bermuda.helper; public class OperationSub extends OperationHelper { @Override public void getResult(int operationA, int operationB) { System.out.println(operationA-operationB); } } OperationMul package com.bermuda.helper; public class OperationMul extends OperationHelper { @Override public void getResult(int operationA, int operationB) { System.out.println(operationA*operationB); } } OperationDiv package com.bermuda.helper; public class OperationDiv extends OperationHelper { @Override public void getResult(int operationA, int operationB) { if(operationB != 0){ System.out.println(operationA/operationB); }else { System.out.println(\"除数不能为0\"); } } } Copyright © qgao 2021-* all right reserved，powered by Gitbook该文件修订时间： 2022-07-08 21:13:28 "},"chapter17/":{"url":"chapter17/","title":"17. 简单工厂模式","keywords":"","body":"TreeviewCopyright © qgao 2021-* all right reserved, powered by aleen42 Client OperationFactory OperationHelper OperationAdd OperationSub OperationMul OperationDiv 简单工厂模式 Client package com.bermuda.surface; import com.bermuda.helper.OperationHelper; import com.bermuda.util.OperationFactory; public class Client { public static void main(String[] args) { OperationHelper operationHelper = OperationFactory.getOperation('+'); operationHelper.getResult(1,2); } } OperationFactory package com.bermuda.util; import com.bermuda.helper.*; public class OperationFactory { public static OperationHelper getOperation(char operation){ OperationHelper operationHelper = null; switch (operation){ case '+': operationHelper = new OperationAdd(); break; case '-': operationHelper = new OperationSub(); break; case '*': operationHelper = new OperationMul(); break; case '/': operationHelper = new OperationDiv(); break; default: operationHelper = null; } return operationHelper; } } OperationHelper package com.bermuda.helper; public abstract class OperationHelper { public abstract void getResult(int operationA,int operationB); } OperationAdd package com.bermuda.helper; public class OperationAdd extends OperationHelper { @Override public void getResult(int operationA,int operationB) { System.out.println(operationA+operationB); } } OperationSub package com.bermuda.helper; public class OperationSub extends OperationHelper { @Override public void getResult(int operationA, int operationB) { System.out.println(operationA-operationB); } } OperationMul package com.bermuda.helper; public class OperationMul extends OperationHelper { @Override public void getResult(int operationA, int operationB) { System.out.println(operationA*operationB); } } OperationDiv package com.bermuda.helper; public class OperationDiv extends OperationHelper { @Override public void getResult(int operationA, int operationB) { if(operationB != 0){ System.out.println(operationA/operationB); }else { System.out.println(\"除数不能为0\"); } } } Copyright © qgao 2021-* all right reserved，powered by Gitbook该文件修订时间： 2022-07-08 21:13:28 "},"chapter18/":{"url":"chapter18/","title":"18. 组合模式-树(未实现)","keywords":"","body":"组合模式-树(未实现) Copyright © qgao 2021-* all right reserved，powered by Gitbook该文件修订时间： 2022-07-08 21:13:28 "},"chapter19/":{"url":"chapter19/","title":"19. 职责链模式","keywords":"","body":"TreeviewCopyright © qgao 2021-* all right reserved, powered by aleen42 Client Manager CommonManager GeneralManager MajorManager Request 职责链模式 Client package com.bermuda.surface; import com.bermuda.Background.CommonManager; import com.bermuda.Background.GeneralManager; import com.bermuda.Background.MajorManager; import com.bermuda.Background.Request; public class Client { public static void main(String[] args) { CommonManager a = new CommonManager(\"a\"); MajorManager b = new MajorManager(\"b\"); GeneralManager c = new GeneralManager(\"c\"); a.setSuperior(b); b.setSuperior(c); Request request = new Request(); request.setRequestType(\"请假\"); request.setNumber(3); a.requestApplication(request); } } Manager package com.bermuda.Background; public abstract class Manager { protected String name; protected Manager superior; public Manager(String name) { this.name = name; } public void setSuperior(Manager superior) { this.superior = superior; } public abstract void requestApplication(Request request); } CommonManager package com.bermuda.Background; public class CommonManager extends Manager { public CommonManager(String name) { super(name); } public void requestApplication(Request request) { if(request.getRequestType().equals(\"请假\") && request.getNumber() GeneralManager package com.bermuda.Background; public class GeneralManager extends Manager { public GeneralManager(String name) { super(name); } public void requestApplication(Request request) { if(request.getRequestType().equals(\"请假\")){ System.out.println(name+\"允许\"+request.getRequestType()+request.getNumber()+\"天\"); }else if (request.getRequestType().equals(\"加薪\") && request.getNumber() MajorManager package com.bermuda.Background; public class MajorManager extends Manager { public MajorManager(String name) { super(name); } public void requestApplication(Request request) { if(request.getRequestType().equals(\"请假\") && request.getNumber() Request package com.bermuda.Background; public class Request { private String requestType; private String requestContent; private int number; public String getRequestType() { return requestType; } public void setRequestType(String requestType) { this.requestType = requestType; } public String getRequestContent() { return requestContent; } public void setRequestContent(String requestContent) { this.requestContent = requestContent; } public int getNumber() { return number; } public void setNumber(int number) { this.number = number; } } Copyright © qgao 2021-* all right reserved，powered by Gitbook该文件修订时间： 2022-07-08 21:13:28 "},"chapter20/":{"url":"chapter20/","title":"20. 装饰模式","keywords":"","body":"TreeviewCopyright © qgao 2021-* all right reserved, powered by aleen42 Client People PeopleImpl Clothes Skirts Socks Tshirt 装饰模式 Client package com.bermda.surface; import com.bermda.entity.People; import com.bermda.entityImpl.PeopleImpl; import com.bermda.entityImpl.Skirts; import com.bermda.entityImpl.Socks; public class Client { public static void main(String[] args) { People people = new PeopleImpl(\"zhang\"); Skirts skirts = new Skirts(); Socks socks = new Socks(); skirts.setPeople(people); socks.setPeople(skirts); socks.action(); } } People package com.bermda.entity; public abstract class People { public abstract void action(); } PeopleImpl package com.bermda.entityImpl; import com.bermda.entity.People; public class PeopleImpl extends People { private String name; public PeopleImpl(String name) { this.name = name; } @Override public void action() { System.out.println(name+\" equiped:\"); } } Clothes package com.bermda.entity; public class Clothes extends People{ private People people = null; public void setPeople(People people) { this.people = people; } @Override public void action() { if(people != null){ people.action(); } } } Skirts package com.bermda.entityImpl; import com.bermda.entity.Clothes; public class Skirts extends Clothes { @Override public void action() { super.action(); System.out.print(\"skirts \"); } } Socks package com.bermda.entityImpl; import com.bermda.entity.Clothes; public class Socks extends Clothes { @Override public void action() { super.action(); System.out.print(\"socks \"); } } Tshirt package com.bermda.entityImpl; import com.bermda.entity.Clothes; public class Tshirt extends Clothes { @Override public void action() { super.action(); System.out.print(\"T-shirt \"); } } Copyright © qgao 2021-* all right reserved，powered by Gitbook该文件修订时间： 2022-07-08 21:13:28 "},"chapter21/":{"url":"chapter21/","title":"21. 观察者模式","keywords":"","body":"TreeviewCopyright © qgao 2021-* all right reserved, powered by aleen42 Client Informer Boss Observer StockObserver 观察者模式 Client package com.bermuda.surface; import com.bermuda.informer.Boss; import com.bermuda.informer.Informer; import com.bermuda.observer.Observer; import com.bermuda.observer.StockObserver; public class Client { public static void main(String[] args) { Informer boss = new Boss(); Observer stockObserver1 = new StockObserver(boss,\"stockObserver1\"); Observer stockObserver2 = new StockObserver(boss,\"stockObserver2\"); boss.attach(stockObserver1); boss.attach(stockObserver2); boss.setInformerState(\"boss come in\"); boss.notice(); } } Informer package com.bermuda.informer; import com.bermuda.observer.Observer; public abstract class Informer { private String informerState; public String getInformerState() { return informerState; } public void setInformerState(String informerState) { this.informerState = informerState; } public abstract void attach(Observer observer); public abstract void detach(Observer observer); public abstract void notice(); } Boss package com.bermuda.informer; import com.bermuda.observer.Observer; import java.util.ArrayList; import java.util.List; public class Boss extends Informer { private List observerList = new ArrayList(); public void attach(Observer observer) { observerList.add(observer); } public void detach(Observer observer) { observerList.remove(observer); } public void notice() { for (Observer observer:observerList) { observer.doAction(); } } } Observer package com.bermuda.observer; import com.bermuda.informer.Informer; public abstract class Observer { protected Informer informer; protected String observerName; public Observer(Informer informer, String observerName) { this.informer = informer; this.observerName = observerName; } public abstract void doAction(); } StockObserver package com.bermuda.observer; import com.bermuda.informer.Informer; public class StockObserver extends Observer { public StockObserver(Informer informer, String observerName) { super(informer, observerName); } public void doAction() { System.out.println(informer.getInformerState()+\":\"+observerName+\"close the stock situation\"); } } Copyright © qgao 2021-* all right reserved，powered by Gitbook该文件修订时间： 2022-07-08 21:13:28 "},"chapter22/":{"url":"chapter22/","title":"22. 访问者模式","keywords":"","body":"TreeviewCopyright © qgao 2021-* all right reserved, powered by aleen42 Client ObjectStructure Person Man Woman Action Success Marriage 访问者模式 Client package com.bermuda.surface; import com.bermuda.background.*; public class Client { public static void main(String[] args) { ObjectStructure objectStructure = new ObjectStructure(); objectStructure.attach(new Man()); objectStructure.attach(new Woman()); Success success = new Success(); objectStructure.display(success); Marriage marriage = new Marriage(); objectStructure.display(marriage); } } ObjectStructure package com.bermuda.background; import java.util.ArrayList; import java.util.List; public class ObjectStructure { private List elements = new ArrayList(); public void attach(Person element){ elements.add(element); } public void detach(Person element){ elements.remove(element); } public void display(Action visitor){ for (Person e:elements ) { e.accept(visitor); } } } Person package com.bermuda.background; public abstract class Person { public abstract void accept(Action visitor); } Man package com.bermuda.background; public class Man extends Person { public void accept(Action visitor) { visitor.getManConclusion(this); } } Woman package com.bermuda.background; public class Woman extends Person { public void accept(Action visitor) { visitor.getWomanConclusion(this); } } Action package com.bermuda.background; public abstract class Action { public abstract void getManConclusion(Man concreteElementA); public abstract void getWomanConclusion(Woman concreteElementB); } Success package com.bermuda.background; public class Success extends Action { public void getManConclusion(Man concreteElementA) { System.out.println(concreteElementA.getClass().getSimpleName()+\" \"+this.getClass().getSimpleName()+\"时，背后多半有一个伟大的女人\"); } public void getWomanConclusion(Woman concreteElementB) { System.out.println(concreteElementB.getClass().getSimpleName()+\" \"+this.getClass().getSimpleName()+\"时，背后大多有一个不成功的男人\"); } } Marriage package com.bermuda.background; public class Marriage extends Action { public void getManConclusion(Man concreteElementA) { System.out.println(concreteElementA.getClass().getSimpleName()+\" \"+this.getClass().getSimpleName()+\"时，感慨道：恋爱游戏终结时，‘有妻徒刑’遥无期\"); } public void getWomanConclusion(Woman concreteElementB) { System.out.println(concreteElementB.getClass().getSimpleName()+\" \"+this.getClass().getSimpleName()+\"时，欣慰曰：爱情长跑路漫漫，婚姻保险保平安\"); } } Copyright © qgao 2021-* all right reserved，powered by Gitbook该文件修订时间： 2022-07-08 21:13:28 "},"chapter23/":{"url":"chapter23/","title":"23. 迭代器模式(未实现)","keywords":"","body":"迭代器模式(未实现) Copyright © qgao 2021-* all right reserved，powered by Gitbook该文件修订时间： 2022-07-08 21:13:28 "},"chapter24/":{"url":"chapter24/","title":"24. 适配器模式-对象","keywords":"","body":"TreeviewCopyright © qgao 2021-* all right reserved, powered by aleen42 Client Target Adapter Adaptee 适配器模式-对象 Client package com.bermuda.surface; import com.bermuda.relativeClass.Adapter; import com.bermuda.relativeClass.Target; public class Client { public static void main(String[] args) { Target target = new Adapter(); target.request(); } } Target package com.bermuda.relativeClass; public class Target { public void request(){ System.out.println(\"普通请求\"); } } Adapter package com.bermuda.relativeClass; public class Adapter extends Target { private Adaptee adaptee = new Adaptee(); @Override public void request() { adaptee.specificRequest(); } } Adaptee package com.bermuda.relativeClass; public class Adaptee { public void specificRequest(){ System.out.println(\"特殊请求\"); } } Copyright © qgao 2021-* all right reserved，powered by Gitbook该文件修订时间： 2022-07-08 21:13:28 "},"chapter25/":{"url":"chapter25/","title":"25. 对象池模式","keywords":"","body":"TreeviewCopyright © qgao 2021-* all right reserved, powered by aleen42 ResourcePool Resource Client 对象池模式 ResourcePool public class ResourcePool { /* ResourcePool 资源池 */ private Resource[] resources; private int index=0; public ResourcePool(){ resources = new Resource[]{new Resource(),new Resource(),new Resource()}; } public Resource getResource(){ if(this.index == this.resources.length) return null; return resources[index++]; }; public boolean releaseResource(Resource resource){ if(index == 0){ return false; }else{ this.resources[--index] = resource; return true; } } } Resource class Resource{ /* Resource 资源 */ private static long counter; private long id; { this.id = counter++; } public long get_id(){ return this.id; } } Client class Client{ /* Client 客户端 */ public static void main(String[] args){ ResourcePool pool = new ResourcePool(); Resource resource1 = pool.getResource(); Resource resource2 = pool.getResource(); Resource resource3 = pool.getResource(); System.out.println(resource1.get_id()); System.out.println(resource2.get_id()); System.out.println(resource3.get_id()); pool.releaseResource(resource1); pool.releaseResource(resource2); pool.releaseResource(resource3); Resource resource4 = pool.getResource(); System.out.println(resource4.get_id()); } } /* Output: 0 1 2 2 */ Copyright © qgao 2021-* all right reserved，powered by Gitbook该文件修订时间： 2022-07-08 21:52:22 "}}